// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: newsfeed.proto

package web.service.newsfeed.rpc;

/**
 * Protobuf service {@code NewsFeedService}
 */
public  abstract class NewsFeedService
    implements com.google.protobuf.Service {
  protected NewsFeedService() {}

  public interface Interface {
    /**
     * <code>rpc getNewsFeed(.GetNewsFeedRequest) returns (.GetNewsFeedResponse);</code>
     */
    public abstract void getNewsFeed(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.GetNewsFeedRequest request,
        com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.GetNewsFeedResponse> done);

    /**
     * <code>rpc saveNewPost(.Post) returns (.SaveNewPostResponse);</code>
     */
    public abstract void saveNewPost(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.Post request,
        com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.SaveNewPostResponse> done);

    /**
     * <code>rpc like(.LikeRequest) returns (.LikeResponse);</code>
     */
    public abstract void like(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.LikeRequest request,
        com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.LikeResponse> done);

    /**
     * <code>rpc share(.ShareRequest) returns (.ShareResponse);</code>
     */
    public abstract void share(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.ShareRequest request,
        com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.ShareResponse> done);

    /**
     * <code>rpc comment(.CommentRequest) returns (.CommentResponse);</code>
     */
    public abstract void comment(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.CommentRequest request,
        com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.CommentResponse> done);

    /**
     * <code>rpc tag(.TagRequest) returns (.TagResponse);</code>
     */
    public abstract void tag(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.TagRequest request,
        com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.TagResponse> done);

  }

  public static com.google.protobuf.Service newReflectiveService(
      final Interface impl) {
    return new NewsFeedService() {
      @java.lang.Override
      public  void getNewsFeed(
          com.google.protobuf.RpcController controller,
          web.service.newsfeed.rpc.GetNewsFeedRequest request,
          com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.GetNewsFeedResponse> done) {
        impl.getNewsFeed(controller, request, done);
      }

      @java.lang.Override
      public  void saveNewPost(
          com.google.protobuf.RpcController controller,
          web.service.newsfeed.rpc.Post request,
          com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.SaveNewPostResponse> done) {
        impl.saveNewPost(controller, request, done);
      }

      @java.lang.Override
      public  void like(
          com.google.protobuf.RpcController controller,
          web.service.newsfeed.rpc.LikeRequest request,
          com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.LikeResponse> done) {
        impl.like(controller, request, done);
      }

      @java.lang.Override
      public  void share(
          com.google.protobuf.RpcController controller,
          web.service.newsfeed.rpc.ShareRequest request,
          com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.ShareResponse> done) {
        impl.share(controller, request, done);
      }

      @java.lang.Override
      public  void comment(
          com.google.protobuf.RpcController controller,
          web.service.newsfeed.rpc.CommentRequest request,
          com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.CommentResponse> done) {
        impl.comment(controller, request, done);
      }

      @java.lang.Override
      public  void tag(
          com.google.protobuf.RpcController controller,
          web.service.newsfeed.rpc.TagRequest request,
          com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.TagResponse> done) {
        impl.tag(controller, request, done);
      }

    };
  }

  public static com.google.protobuf.BlockingService
      newReflectiveBlockingService(final BlockingInterface impl) {
    return new com.google.protobuf.BlockingService() {
      public final com.google.protobuf.Descriptors.ServiceDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }

      public final com.google.protobuf.Message callBlockingMethod(
          com.google.protobuf.Descriptors.MethodDescriptor method,
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Message request)
          throws com.google.protobuf.ServiceException {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.callBlockingMethod() given method descriptor for " +
            "wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return impl.getNewsFeed(controller, (web.service.newsfeed.rpc.GetNewsFeedRequest)request);
          case 1:
            return impl.saveNewPost(controller, (web.service.newsfeed.rpc.Post)request);
          case 2:
            return impl.like(controller, (web.service.newsfeed.rpc.LikeRequest)request);
          case 3:
            return impl.share(controller, (web.service.newsfeed.rpc.ShareRequest)request);
          case 4:
            return impl.comment(controller, (web.service.newsfeed.rpc.CommentRequest)request);
          case 5:
            return impl.tag(controller, (web.service.newsfeed.rpc.TagRequest)request);
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getRequestPrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getRequestPrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return web.service.newsfeed.rpc.GetNewsFeedRequest.getDefaultInstance();
          case 1:
            return web.service.newsfeed.rpc.Post.getDefaultInstance();
          case 2:
            return web.service.newsfeed.rpc.LikeRequest.getDefaultInstance();
          case 3:
            return web.service.newsfeed.rpc.ShareRequest.getDefaultInstance();
          case 4:
            return web.service.newsfeed.rpc.CommentRequest.getDefaultInstance();
          case 5:
            return web.service.newsfeed.rpc.TagRequest.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getResponsePrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getResponsePrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return web.service.newsfeed.rpc.GetNewsFeedResponse.getDefaultInstance();
          case 1:
            return web.service.newsfeed.rpc.SaveNewPostResponse.getDefaultInstance();
          case 2:
            return web.service.newsfeed.rpc.LikeResponse.getDefaultInstance();
          case 3:
            return web.service.newsfeed.rpc.ShareResponse.getDefaultInstance();
          case 4:
            return web.service.newsfeed.rpc.CommentResponse.getDefaultInstance();
          case 5:
            return web.service.newsfeed.rpc.TagResponse.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

    };
  }

  /**
   * <code>rpc getNewsFeed(.GetNewsFeedRequest) returns (.GetNewsFeedResponse);</code>
   */
  public abstract void getNewsFeed(
      com.google.protobuf.RpcController controller,
      web.service.newsfeed.rpc.GetNewsFeedRequest request,
      com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.GetNewsFeedResponse> done);

  /**
   * <code>rpc saveNewPost(.Post) returns (.SaveNewPostResponse);</code>
   */
  public abstract void saveNewPost(
      com.google.protobuf.RpcController controller,
      web.service.newsfeed.rpc.Post request,
      com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.SaveNewPostResponse> done);

  /**
   * <code>rpc like(.LikeRequest) returns (.LikeResponse);</code>
   */
  public abstract void like(
      com.google.protobuf.RpcController controller,
      web.service.newsfeed.rpc.LikeRequest request,
      com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.LikeResponse> done);

  /**
   * <code>rpc share(.ShareRequest) returns (.ShareResponse);</code>
   */
  public abstract void share(
      com.google.protobuf.RpcController controller,
      web.service.newsfeed.rpc.ShareRequest request,
      com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.ShareResponse> done);

  /**
   * <code>rpc comment(.CommentRequest) returns (.CommentResponse);</code>
   */
  public abstract void comment(
      com.google.protobuf.RpcController controller,
      web.service.newsfeed.rpc.CommentRequest request,
      com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.CommentResponse> done);

  /**
   * <code>rpc tag(.TagRequest) returns (.TagResponse);</code>
   */
  public abstract void tag(
      com.google.protobuf.RpcController controller,
      web.service.newsfeed.rpc.TagRequest request,
      com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.TagResponse> done);

  public static final
      com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptor() {
    return web.service.newsfeed.rpc.Newsfeed.getDescriptor().getServices().get(0);
  }
  public final com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }

  public final void callMethod(
      com.google.protobuf.Descriptors.MethodDescriptor method,
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Message request,
      com.google.protobuf.RpcCallback<
        com.google.protobuf.Message> done) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.callMethod() given method descriptor for wrong " +
        "service type.");
    }
    switch(method.getIndex()) {
      case 0:
        this.getNewsFeed(controller, (web.service.newsfeed.rpc.GetNewsFeedRequest)request,
          com.google.protobuf.RpcUtil.<web.service.newsfeed.rpc.GetNewsFeedResponse>specializeCallback(
            done));
        return;
      case 1:
        this.saveNewPost(controller, (web.service.newsfeed.rpc.Post)request,
          com.google.protobuf.RpcUtil.<web.service.newsfeed.rpc.SaveNewPostResponse>specializeCallback(
            done));
        return;
      case 2:
        this.like(controller, (web.service.newsfeed.rpc.LikeRequest)request,
          com.google.protobuf.RpcUtil.<web.service.newsfeed.rpc.LikeResponse>specializeCallback(
            done));
        return;
      case 3:
        this.share(controller, (web.service.newsfeed.rpc.ShareRequest)request,
          com.google.protobuf.RpcUtil.<web.service.newsfeed.rpc.ShareResponse>specializeCallback(
            done));
        return;
      case 4:
        this.comment(controller, (web.service.newsfeed.rpc.CommentRequest)request,
          com.google.protobuf.RpcUtil.<web.service.newsfeed.rpc.CommentResponse>specializeCallback(
            done));
        return;
      case 5:
        this.tag(controller, (web.service.newsfeed.rpc.TagRequest)request,
          com.google.protobuf.RpcUtil.<web.service.newsfeed.rpc.TagResponse>specializeCallback(
            done));
        return;
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getRequestPrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getRequestPrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return web.service.newsfeed.rpc.GetNewsFeedRequest.getDefaultInstance();
      case 1:
        return web.service.newsfeed.rpc.Post.getDefaultInstance();
      case 2:
        return web.service.newsfeed.rpc.LikeRequest.getDefaultInstance();
      case 3:
        return web.service.newsfeed.rpc.ShareRequest.getDefaultInstance();
      case 4:
        return web.service.newsfeed.rpc.CommentRequest.getDefaultInstance();
      case 5:
        return web.service.newsfeed.rpc.TagRequest.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getResponsePrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getResponsePrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return web.service.newsfeed.rpc.GetNewsFeedResponse.getDefaultInstance();
      case 1:
        return web.service.newsfeed.rpc.SaveNewPostResponse.getDefaultInstance();
      case 2:
        return web.service.newsfeed.rpc.LikeResponse.getDefaultInstance();
      case 3:
        return web.service.newsfeed.rpc.ShareResponse.getDefaultInstance();
      case 4:
        return web.service.newsfeed.rpc.CommentResponse.getDefaultInstance();
      case 5:
        return web.service.newsfeed.rpc.TagResponse.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public static Stub newStub(
      com.google.protobuf.RpcChannel channel) {
    return new Stub(channel);
  }

  public static final class Stub extends web.service.newsfeed.rpc.NewsFeedService implements Interface {
    private Stub(com.google.protobuf.RpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.RpcChannel channel;

    public com.google.protobuf.RpcChannel getChannel() {
      return channel;
    }

    public  void getNewsFeed(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.GetNewsFeedRequest request,
        com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.GetNewsFeedResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        web.service.newsfeed.rpc.GetNewsFeedResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          web.service.newsfeed.rpc.GetNewsFeedResponse.class,
          web.service.newsfeed.rpc.GetNewsFeedResponse.getDefaultInstance()));
    }

    public  void saveNewPost(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.Post request,
        com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.SaveNewPostResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        web.service.newsfeed.rpc.SaveNewPostResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          web.service.newsfeed.rpc.SaveNewPostResponse.class,
          web.service.newsfeed.rpc.SaveNewPostResponse.getDefaultInstance()));
    }

    public  void like(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.LikeRequest request,
        com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.LikeResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        web.service.newsfeed.rpc.LikeResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          web.service.newsfeed.rpc.LikeResponse.class,
          web.service.newsfeed.rpc.LikeResponse.getDefaultInstance()));
    }

    public  void share(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.ShareRequest request,
        com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.ShareResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        web.service.newsfeed.rpc.ShareResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          web.service.newsfeed.rpc.ShareResponse.class,
          web.service.newsfeed.rpc.ShareResponse.getDefaultInstance()));
    }

    public  void comment(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.CommentRequest request,
        com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.CommentResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        web.service.newsfeed.rpc.CommentResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          web.service.newsfeed.rpc.CommentResponse.class,
          web.service.newsfeed.rpc.CommentResponse.getDefaultInstance()));
    }

    public  void tag(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.TagRequest request,
        com.google.protobuf.RpcCallback<web.service.newsfeed.rpc.TagResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(5),
        controller,
        request,
        web.service.newsfeed.rpc.TagResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          web.service.newsfeed.rpc.TagResponse.class,
          web.service.newsfeed.rpc.TagResponse.getDefaultInstance()));
    }
  }

  public static BlockingInterface newBlockingStub(
      com.google.protobuf.BlockingRpcChannel channel) {
    return new BlockingStub(channel);
  }

  public interface BlockingInterface {
    public web.service.newsfeed.rpc.GetNewsFeedResponse getNewsFeed(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.GetNewsFeedRequest request)
        throws com.google.protobuf.ServiceException;

    public web.service.newsfeed.rpc.SaveNewPostResponse saveNewPost(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.Post request)
        throws com.google.protobuf.ServiceException;

    public web.service.newsfeed.rpc.LikeResponse like(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.LikeRequest request)
        throws com.google.protobuf.ServiceException;

    public web.service.newsfeed.rpc.ShareResponse share(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.ShareRequest request)
        throws com.google.protobuf.ServiceException;

    public web.service.newsfeed.rpc.CommentResponse comment(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.CommentRequest request)
        throws com.google.protobuf.ServiceException;

    public web.service.newsfeed.rpc.TagResponse tag(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.TagRequest request)
        throws com.google.protobuf.ServiceException;
  }

  private static final class BlockingStub implements BlockingInterface {
    private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.BlockingRpcChannel channel;

    public web.service.newsfeed.rpc.GetNewsFeedResponse getNewsFeed(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.GetNewsFeedRequest request)
        throws com.google.protobuf.ServiceException {
      return (web.service.newsfeed.rpc.GetNewsFeedResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        web.service.newsfeed.rpc.GetNewsFeedResponse.getDefaultInstance());
    }


    public web.service.newsfeed.rpc.SaveNewPostResponse saveNewPost(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.Post request)
        throws com.google.protobuf.ServiceException {
      return (web.service.newsfeed.rpc.SaveNewPostResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        web.service.newsfeed.rpc.SaveNewPostResponse.getDefaultInstance());
    }


    public web.service.newsfeed.rpc.LikeResponse like(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.LikeRequest request)
        throws com.google.protobuf.ServiceException {
      return (web.service.newsfeed.rpc.LikeResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        web.service.newsfeed.rpc.LikeResponse.getDefaultInstance());
    }


    public web.service.newsfeed.rpc.ShareResponse share(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.ShareRequest request)
        throws com.google.protobuf.ServiceException {
      return (web.service.newsfeed.rpc.ShareResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        web.service.newsfeed.rpc.ShareResponse.getDefaultInstance());
    }


    public web.service.newsfeed.rpc.CommentResponse comment(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.CommentRequest request)
        throws com.google.protobuf.ServiceException {
      return (web.service.newsfeed.rpc.CommentResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        web.service.newsfeed.rpc.CommentResponse.getDefaultInstance());
    }


    public web.service.newsfeed.rpc.TagResponse tag(
        com.google.protobuf.RpcController controller,
        web.service.newsfeed.rpc.TagRequest request)
        throws com.google.protobuf.ServiceException {
      return (web.service.newsfeed.rpc.TagResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(5),
        controller,
        request,
        web.service.newsfeed.rpc.TagResponse.getDefaultInstance());
    }

  }

  // @@protoc_insertion_point(class_scope:NewsFeedService)
}

